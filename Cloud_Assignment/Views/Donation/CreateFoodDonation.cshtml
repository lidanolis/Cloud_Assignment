@model Cloud_Assignment.Controllers.DonationController.DonationViewModel
@using Cloud_Assignment.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<Cloud_AssignmentUser> UserManager

@{
    ViewData["Title"] = "CreateFoodDonation";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var UserAccount = await UserManager.GetUserAsync(User);
    var FullRecord = new List<FoodRecord>();
    foreach(var item in Model.FoodRecord)
    {
        if(item.UserId == UserAccount.Id)
        {
            FullRecord.Add(item);
        }
    }
}
<style>
    h1 {
        font-size: 40px;
        color: black;
        text-shadow: 2px 2px white;
    }

    h2 {
        text-shadow: 2px 2px white;
        font-size: 35px;
        color: black;
        margin-top: 0;
        margin-bottom: 8px;
        border-bottom: 2px solid white;
        padding-bottom: 4px;
    }

    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
    }

    table {
        width: 100%;
        margin: 25px 0;
        font-size: 0.9em;
        min-width: 400px;
        border-radius: 5px 5px 0 0;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

    th, td {
        padding: 12px 15px;
        text-align: center;
    }

    th {
        background-color: #2d8bba;
        color: #ffffff;
        text-transform: uppercase;
    }

    tr {
        background-color: white;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
    }

        .action-buttons form, .action-buttons button {
            margin-right: 10px;
        }

        .action-buttons button {
            padding: 5px 10px;
            background-color: #2d8bba;
            color: white;
            border: none;
            cursor: pointer;
        }

    .errorBox {
        background-color: red;
        text-align: center;
        color: white;
    }

    .allwhilte {
        background-color: white;
    }

    .actbtn {
        text-decoration: none;
        padding: 0.5rem;
        border: 1px solid #333333;
        border-radius: 10px;
        background-color: #F0F8FF;
    }

        .actbtn:hover {
            background-color: #9966FF;
            color: #FFFFFF;
        }

    .textboxdsg {
        width: 100%;
        padding: 10px; /* Add padding to the textbox */
        border: 1px solid #ccc; /* Add a border to the textbox */
        border-radius: 5px; /* Add rounded corners */
        color: #333; /* Set the text color */
        font-size: 14px; /* Set the font size */
    }

    .errorBox {
        background-color: red;
        text-align: center;
        color: white;
    }

</style>
<h1>New Food Donation</h1>
@if(FullRecord.Count >= 1)
{
        <table border="1">
            <tr> 
                <th><label>Food Type</label></th>
                <th><label>Food Quantity</label></th>
                <th><label>Food Donation Date</label></th>
            </tr>
            @foreach(var item in FullRecord){
            <tr>
                <td>@(item.FoodId == null ? "Removed" : Model.FoodList.Find(elem => elem.FoodId == item.FoodId).FoodName)</td>
                    <td>@item.FoodQuantity</td>
                    <td>@item.DOR</td>
                </tr>
            }
        </table>
        <br />
        <br />
}


<center>
    <form onsubmit="validateCredentials(event)" asp-action="AddFoodDonation" method="post">
        <table class="allwhilte">
            <tr> 
                <th><label>User Information</label></th>
                <td><input class="textboxdsg" name="UserFullName" value="@UserAccount?.UserFullName" readonly /></td>
                <td><input name="UserId" value="@UserAccount?.Id" hidden /></td>
            </tr>

            <tr>
                <th><label for="DonationType">Choose a donation option:</label></th>
                <td>
                    <select class="textboxdsg" name="Donationtype" onchange="showControls(this)">

                        <option value="showCombo" selected>Show Existing Food Type</option>
                        <option value="showOther">Create New Food Type</option>

                    </select>
                </td>
                <td><input type="hidden" name="selectedOption" id="selectedOption" value="showCombo" /></td>
            </tr>

            <tr>
                <th><label>Food Type</label></th>
                <td id="existingFoodType">
                    <select class="textboxdsg" id="existingFoodTypeComboBox" name="FoodId" @(Model.FoodList.Count == 0 ? "disabled" : null)>
                    @foreach (var item in Model.FoodList)
                    {
                        <option value="@item.FoodId">@item.FoodName</option>
                    }
                </select>
                </td>
                <td id ="newFoodType" hidden>
                    <input class="textboxdsg" type="text" name="FoodType" id="foodType" />
                </td>
            </tr>

            <tr id="newFoodTypeTextBox" hidden>
                <th>
                    <label for="FoodDesc">Food Description</label> </th>
                <td>
                    <input class="textboxdsg" id="newFoodDescTextBox" type="text" name="FoodDesc" />
                    
                </td>
            </tr>

            <tr>
               <th>
                <label>Food Quantity</label>
                </th>
                <td>
                    <input class="textboxdsg" type="number" id="FoodQuantityInput" name="FoodQuantity" min="0" step="1" pattern="\d*" oninput="validity.valid || (value = '');">
                </td>
            </tr>
            <tr>
                <th>
                    <label>Action:</label>
                </th>
                <td>
                    <input class="actbtn" type="submit" id="submitbutton" name="submit" value="DONATE" style="width:100%;"/>
                </td>
            </tr>
            <tr>
                <td><div id="resultContainer"></div></td>
            </tr>
        </table>
    </form>
    <br />
    <br />
</center>

<script>
    function showControls(selectElement) {
        clearResult();
        var showCombo = selectElement.value;
        var existingFoodType = document.getElementById('existingFoodType');
        var newFoodType = document.getElementById('newFoodType');
        var newFoodTypeTextBox = document.getElementById('newFoodTypeTextBox');

        if (showCombo === 'showCombo') {
            existingFoodType.hidden = false;
            newFoodType.hidden = true;
            newFoodTypeTextBox.hidden = true;
            document.getElementById('selectedOption').value = "showCombo";
        } else {
            existingFoodType.hidden = true;
            newFoodType.hidden = false;
            newFoodTypeTextBox.hidden = false;
            document.getElementById('selectedOption').value = "showOther";
        }
    }

    function validateCredentials(event){
        var showCombo = document.getElementById('selectedOption').value;
        clearResult();
        if (showCombo == "showCombo") {
            var existingFoodTypeComboBox = document.getElementById('existingFoodTypeComboBox').value;
            var FoodQuantityInput = document.getElementById('FoodQuantityInput').value;

            if (existingFoodTypeComboBox == "" || FoodQuantityInput == "") {
                showResult("Invalid Credentials");
                event.preventDefault();
            } else if (FoodQuantityInput <=0){
                showResult("Invalid Amount");
                event.preventDefault();
            }
        } else if (showCombo == "showOther") {
            var newFoodTypeTextBox = document.getElementById('foodType').value;
            var newFoodDescTextBox = document.getElementById('newFoodDescTextBox').value;
            var FoodQuantityInput = document.getElementById('FoodQuantityInput').value;

            if (newFoodTypeTextBox == "" || newFoodDescTextBox == "" || FoodQuantityInput == "") {
                showResult("Invalid Credentials");
                event.preventDefault();
            } else if (FoodQuantityInput <= 0) {
                showResult("Invalid Amount");
                event.preventDefault();
            }
        } else {
            showResult(showCombo);
            event.preventDefault();
        }
    }

    function showResult(message) {
        var resultLabel = document.createElement('label');

        resultLabel.textContent = message;
        resultLabel.classList.add('errorBox');

        document.getElementById('resultContainer').appendChild(resultLabel);
    }

    function clearResult() {
        var resultContainer = document.getElementById('resultContainer');
        resultContainer.innerHTML = '';
    }
</script>

