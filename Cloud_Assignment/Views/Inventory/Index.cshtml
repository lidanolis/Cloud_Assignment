@model Cloud_Assignment.Controllers.InventoryController.InventoryViewModel
@using Cloud_Assignment.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<Cloud_AssignmentUser> UserManager
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var UserAccount = await UserManager.GetUserAsync(User);
    FinancialRecord? SpecificFinancial = null;
    var ListofFood = new List<InventoryRecord>();
    if (Model.FinancialRecord.Count >= 1)
    {
        ListofFood = Model.FoodList;
    }
    if (Model.FinancialRecord.Count >= 1)
    {
        SpecificFinancial = Model.FinancialRecord.Last();
    }

}
<style>
    h1 {
        font-size: 40px;
        color: black;
        text-shadow: 2px 2px white;
    }

    h2 {
        text-shadow: 2px 2px white;
        font-size: 35px;
        color: black;
        margin-top: 0;
        margin-bottom: 8px;
        border-bottom: 2px solid white; 
        padding-bottom: 4px;
    }

    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
    }

    table {
        width: 100%;
        margin: 25px 0;
        font-size: 0.9em;
        min-width: 400px;
        border-radius: 5px 5px 0 0;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

    th, td {
        padding: 12px 15px;
        text-align: center;
    }

    th {
        background-color: #2d8bba;
        color: #ffffff;
        text-transform: uppercase;
    }

    tr {
        background-color: white;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
    }

        .action-buttons form, .action-buttons button {
            margin-right: 10px;
        }

        .action-buttons button {
            padding: 5px 10px;
            background-color: #2d8bba;
            color: white;
            border: none;
            cursor: pointer;
        }

        .errorBox {
            background-color: red;
            text-align: center;
            color: white;
        }

        .allwhilte{
        background-color: white;
        }

    .actbtn {
        text-decoration: none;
        padding: 0.5rem;
        border: 1px solid #333333;
        border-radius: 10px;
        background-color: #F0F8FF;
    }

        .actbtn:hover {
            background-color: #9966FF;
            color: #FFFFFF;
        }

    .textboxdsg{
        width:100%;
        padding: 10px; /* Add padding to the textbox */
        border: 1px solid #ccc; /* Add a border to the textbox */
        border-radius: 5px; /* Add rounded corners */
        color: #333; /* Set the text color */
        font-size: 14px; /* Set the font size */
    }

</style>
<h1>Inventory</h1>
<h2>-FOOD-</h2>
@if (Model.FoodList.Count >= 1)
{
        <table border="1">
            <tr>
                <th ><label>Food Id</label></th>
                <th ><label>Food Name</label></th>
                <th ><label>Food Total</label></th>
                <th ><label>Food Description</label></th>
                <th><label></label></th>
            </tr>
            @foreach (var item in Model.FoodList)
            {
                <tr>
                    <td >@item.FoodId</td>
                    <td >@item.FoodName</td>
                    <td >@item.FoodTotal</td>
                    <td >@item.FoodDesc</td>
                <td class="action-buttons">
                    <form asp-action="EditInventory" asp-controller="Inventory" asp-route-foodId="@item.FoodId">
                            <button>EDIT</button>

                    <button asp-action="RemoveInventory" asp-controller="Inventory" asp-route-fdId="@item.FoodId" style="background-color:red;">REMOVE</button>

                    </form>
                </td>
                </tr>
            }
        </table>
    <br />
    <br />
}

<center class="allwhilte">
    <form onsubmit="validateDonationCredentials(event)" asp-action="AddFoodDonation" method="post">
        <table>
            <tr>
                <th><label>User Information</label></th>
                <td><input class="textboxdsg" name="UserFullName" value="@UserAccount?.UserFullName" readonly /></td>
                <td><input name="UserId" value="@UserAccount?.Id" hidden /></td>
            </tr>
            <tr>
                <th><label for="DonationOptions">Inventory options:</label></th>
                <td>
                    <select class="textboxdsg" onchange="showControls(this)">
                        <option value="ModifyExisting" selected>Modify Existing Food Type</option>
                        <option value="ModifyOther">Create New Food Type</option>
                    </select>
                </td>
                <td><input class="textboxdsg" type="hidden" name="DonationOptions" id="DonationOptions" value="ModifyExisting" /></td>
            </tr>

            @*  ////  *@
            <tr>
                <th><label>Food Type</label></th>
                <td id="existingFoodType">
                    <select class="textboxdsg" id="existingFoodTypeComboBox" name="FoodId" @(Model.FoodList.Count == 0 ? "disabled" : null)>
                        @foreach (var item in Model.FoodList)
                        {
                            <option value="@item.FoodId">@item.FoodName</option>
                        }
                    </select>
                </td>
                <td id="newFoodType" hidden>
                    <input class="textboxdsg" type="text" name="FoodType" id="foodType" />
                </td>
            </tr>
            @*  ////  *@

            <tr id="newFoodTypeTextBox" hidden>
                <th>
                    <label for="FoodDesc">Food Description</label>
                </th>
                <td>
                    <input class="textboxdsg" id="newFoodDescTextBox" type="text" name="FoodDesc" />
                </td>
            </tr>


            <tr id="ManageDonationType">
                <th><label for="ManageDonationType">Manage Donations</label></th>
                <td>
                    <select class="textboxdsg" name="ManageDonationType" onchange="modifyDonation(this)">

                        <option value="Modify" selected>Modify To</option>
                        <option value="Increase">Increase BY</option>
                        <option value="Decrease">Decrease By</option>

                    </select>
                </td>
                <td><input class="textboxdsg" type="hidden" name="selectedDonationOption" id="selectedDonationOption" value="Modify" /></td>
            </tr>
            <tr>
                <th>
                    <label>Food Quantity</label>
                </th>
                <td>
                    <input class="textboxdsg" type="number" id="FoodQuantityInput" name="FoodQuantityInput" min="0" step="1" pattern="\d*" oninput="validity.valid || (value = '');">
                </td>
            </tr>
            @*  ////  *@
            <tr>
                <th>
                    <label for="ModificationDesc">Reason Of Modification</label>
                </th>
                <td>
                    <input class="textboxdsg" id="ModificationDesc" type="text" name="ModificationDesc" />
                </td>
            </tr>

            <tr>
                <td>
                    <input class="textboxdsg" type="number" id="PassedDonationAmount" name="PassedDonationAmount" min="0" step="0.01" pattern="\d+(\.\d{1,2})?" oninput="validity.valid || (value = '');" value="0" hidden>

                </td>
                <td><input class="textboxdsg" type="hidden" id="PassedDonationType" name="PassedDonationType" value="Modify" /></td>
            </tr>
            <tr>
                <td>
                    <input class="actbtn" type="submit" id="submitbutton" name="submit" value="UPDATE" />
                </td>
            </tr>
            <tr>
                <td><div id="foodResultContainer"></div></td>
            </tr>
        </table>
    </form>
</center>

<br />
<br />
<h2>-MONEY-</h2>
@if (SpecificFinancial != null)
{
    <table border="1">
        <tr>
            <th ><label>Currency Type</label></th>
            <th ><label>Balance</label></th>
        </tr>
        <tr>
            <td >@SpecificFinancial.CurrencyType</td>
            <td >@SpecificFinancial.Balance</td>
        </tr>
    </table>
    <br />
    <br />
}

<center class="allwhilte">
    <form onsubmit="validateFinancialCredentials(event)" asp-action="AddMoneyDonation" method="post">
        <table>
            <tr>
                <th><label>User Information</label></th>
                <td><input class="textboxdsg" name="UserFullName" value="@UserAccount?.UserFullName" readonly /></td>
                <td><input name="UserId" value="@UserAccount?.Id" hidden /></td>
            </tr>
            <tr>
                <th><label for="Financetype">Manage Finance</label></th>
                <td>
                    <select class="textboxdsg" name="Financetype" onchange="modifyFinance(this)">

                        <option value="Modify" selected>Modify To</option>
                        <option value="Increase">Increase BY</option>
                        <option value="Decrease">Decrease By</option>

                    </select>
                </td>
                <td><input type="hidden" name="selectedOption" id="selectedOption" value="Modify" /></td>
            </tr>

            <tr>
                <th>
                    <label>Amount:</label>
                </th>
                <td>
                    <input class="textboxdsg" type="number" id="MoneyAmountInput" name="Amount" min="0" step="0.01" pattern="\d+(\.\d{1,2})?" oninput="validity.valid || (value = '');">
                </td>
            </tr>
            <tr>
                <th>
                    <label>Reason Of Change</label>
                </th>
                <td>
                    <input class="textboxdsg" id="ChangeDesc" type="text" name="ChangeDesc" />

                </td>
            </tr>
            <tr>
                <td>
                    <input class="textboxdsg" type="number" id="PassedAmount" name="PassedAmount" min="0" step="0.01" pattern="\d+(\.\d{1,2})?" oninput="validity.valid || (value = '');" value="0" hidden>

                </td>
                <td><input type="hidden" id="PassedType" name="PassedType" value="Modify" /></td>
                <td><input type="hidden" id="SpecificFinancial" name="SpecificFinancial" value="@(SpecificFinancial ==  null ? "" : SpecificFinancial.Balance)" /></td>
            </tr>
            <tr>
                <td>
                    <input class="actbtn" type="submit" id="submitbutton" name="submit" value="UPDATE" />
                </td>
            </tr>
            <tr>
                <td><div id="resultContainer"></div></td>
            </tr>
        </table>
    </form>
</center>

<script>
    function showControls(selectElement) {
        clearResult();
        var showCombo = selectElement.value;
        
        var existingFoodType = document.getElementById('existingFoodType');
        var newFoodType = document.getElementById('newFoodType');
        var newFoodTypeTextBox = document.getElementById('newFoodTypeTextBox');
        var ManageDonationType = document.getElementById('ManageDonationType');

        if (showCombo === 'ModifyExisting') {
            existingFoodType.hidden = false;
            ManageDonationType.hidden = false;
            newFoodType.hidden = true;
            newFoodTypeTextBox.hidden = true;
            document.getElementById('DonationOptions').value = "ModifyExisting";

        } else {
            existingFoodType.hidden = true;
            ManageDonationType.hidden = true;
            newFoodType.hidden = false;
            newFoodTypeTextBox.hidden = false;
            document.getElementById('DonationOptions').value = "ModifyOther";
        }
    }
    function validateDonationCredentials(event) {
        try {
            clearFoodResult();
            var DonationOptions = document.getElementById("DonationOptions").value;

            if (DonationOptions == "ModifyExisting") {

                var existingFoodTypeComboBox = document.getElementById('existingFoodTypeComboBox').value;
                var ModificationDesc = document.getElementById('ModificationDesc').value;
                var selectedDonationOption = document.getElementById('selectedDonationOption').value;
                var FoodQuantityInput = document.getElementById('FoodQuantityInput').value;

                if (existingFoodTypeComboBox == "" || ModificationDesc == "" || selectedDonationOption == "" || FoodQuantityInput == "") {
                    showFoodResult("Invalid Credentials");
                    event.preventDefault();
                } else if (selectedDonationOption != "Modify" && FoodQuantityInput <= 0) {
                    showFoodResult("Invalid Amount");
                    event.preventDefault();
                }
                else {
                    var PassedDonationAmount = document.getElementById("PassedDonationAmount");
                    var PassedDonationType = document.getElementById("PassedDonationType");

                    var fdList = @Html.Raw(Json.Serialize(ListofFood));
                    var value = parseInt(existingFoodTypeComboBox, 10);

                    var foundObject = parseInt(fdList.find(item => item.foodId == value).foodTotal);
                    var specDonationAmountInput = parseInt(FoodQuantityInput);

                    if (selectedDonationOption == "Modify") {
                        if (specDonationAmountInput > foundObject) {
                            PassedDonationType.value = "Increase-M";
                            PassedDonationAmount.value = specDonationAmountInput - foundObject;
                        }
                        else if (specDonationAmountInput < foundObject) {
                            PassedDonationType.value = "Decrease-M";
                            PassedDonationAmount.value = foundObject - specDonationAmountInput;
                        }
                        else {
                            showFoodResult("No Revelant Change");
                            event.preventDefault();
                        }
                    }
                    else if (selectedDonationOption == "Increase") {
                        PassedDonationType.value = "Increase";
                        PassedDonationAmount.value = specDonationAmountInput;
                    }
                    else if (selectedDonationOption == "Decrease") {
                        if (specDonationAmountInput > foundObject) {
                            console.log("here");
                            showFoodResult("Exceeded Amount Of Deduction");
                            event.preventDefault();
                        }
                        else {
                            PassedDonationType.value = "Decrease";
                            PassedDonationAmount.value = specDonationAmountInput;
                        }
                    }
                    else {
                        showFoodResult("error");
                        event.preventDefault();
                    }
                }

            }
            else if (DonationOptions == "ModifyOther") {
                var newFoodType = document.getElementById('foodType').value;
                var newFoodTypeTextBox = document.getElementById('newFoodDescTextBox').value;
                var ModificationDesc = document.getElementById('ModificationDesc').value;
                var selectedDonationOption = document.getElementById('selectedDonationOption').value;
                var FoodQuantityInput = document.getElementById('FoodQuantityInput').value;

                if (newFoodType == "" || newFoodTypeTextBox == "" || ModificationDesc == "" || selectedDonationOption == "" || FoodQuantityInput == "") {
                    showFoodResult("Invalid Credentials");
                    event.preventDefault();
                } else if (FoodQuantityInput <= 0) {
                    showFoodResult("Invalid Amount");
                    event.preventDefault();
                }
            }
        }catch(err){
            console.log(err);
            event.preventDefault();
        }
    }

    function modifyFinance(selectElement) {
        clearResult();
        var FinanceType = selectElement.value;
        document.getElementById('selectedOption').value = FinanceType;
    }
    function modifyDonation(selectElement) {
        clearFoodResult();
        var DonationType = selectElement.value;
        document.getElementById('selectedDonationOption').value = DonationType;
    }

    function validateFinancialCredentials(event) {
        try {
            clearResult();
            var MoneyAmountInput = document.getElementById('MoneyAmountInput').value;
            var selectedOption = document.getElementById('selectedOption').value;
            var passedAmount = document.getElementById('PassedAmount');
            var passedType = document.getElementById('PassedType');
            var ChangeDesc = document.getElementById('ChangeDesc').value;
            var SpecificFinancial = document.getElementById('SpecificFinancial').value;
            if (MoneyAmountInput == "" || ChangeDesc == "") {
                showResult("Invalid Credentials");
                event.preventDefault();
            } else if (selectedOption != "Modify" && parseFloat(MoneyAmountInput) <= 0) {
                showResult("Invalid Amount");
                event.preventDefault();
            }
            else {

                if (SpecificFinancial == "") {
                    if (selectedOption == "Modify") {
                        passedType.value = "Increase";
                        passedAmount.value = MoneyAmountInput;
                    }
                    else if (selectedOption == "Increase") {
                        passedType.value = "Increase";
                        passedAmount.value = MoneyAmountInput;
                    } else if (selectedOption == "Decrease") {
                        showResult("Nothing To Decrease");
                        event.preventDefault();
                    }
                } else {
                    var specFinancial = parseFloat(SpecificFinancial);
                    var specMoneyAmountInput = parseFloat(MoneyAmountInput);

                    if (selectedOption == "Modify") {
                        if (specMoneyAmountInput > specFinancial) {
                            passedType.value = "Increase";
                            passedAmount.value = specMoneyAmountInput - specFinancial;
                        }
                        else if (specMoneyAmountInput < specFinancial) {
                            passedType.value = "Decrease";
                            passedAmount.value = specFinancial - specMoneyAmountInput;
                        }
                        else {
                            showResult("No Revelant Change");
                            event.preventDefault();
                        }
                    }

                    else if (selectedOption == "Increase") {
                        passedType.value = "Increase";
                        passedAmount.value = specMoneyAmountInput;
                    }
                    else if (selectedOption == "Decrease") {
                        if (specMoneyAmountInput > specFinancial) {
                            showResult("Exceeded Amount Of Deduction");
                            event.preventDefault();
                        }
                        else {
                            passedType.value = "Decrease";
                            passedAmount.value = specMoneyAmountInput;
                        }
                    }
                    else {
                        showResult("error");
                        event.preventDefault();
                    }
                }

            }
        } catch (err) {
            showResult(err + "-");
            event.preventDefault();
        }
    }
    
    function showFoodResult(message) {
        var resultLabel = document.createElement('label');

        resultLabel.textContent = message;
        resultLabel.classList.add('errorBox');

        document.getElementById('foodResultContainer').appendChild(resultLabel);
    }

    function clearFoodResult() {
        var resultContainer = document.getElementById('foodResultContainer');
        resultContainer.innerHTML = '';
    }

    function showResult(message) {
        var resultLabel = document.createElement('label');

        resultLabel.textContent = message;
        resultLabel.classList.add('errorBox');

        document.getElementById('resultContainer').appendChild(resultLabel);
    }

    function clearResult() {
        var resultContainer = document.getElementById('resultContainer');
        resultContainer.innerHTML = '';
    }
</script>

